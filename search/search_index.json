{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to The Data Armory"},{"location":"#_1","title":"Home","text":"Hi,I'm Evans | Instructor @ The Data Armory <p> <code>I write and make beginner friendly Python/Data Analysis tutorials &amp; informational Machine Learning/Data Science videos</code> </p> <p> </p> <p> <p>Python Course Notes</p> Number Notebook Video Tutorial 00 What is Python 00-Video 01 Python Variables 01-Video 02 Data Types 02-Video 03 Python Comments 03-Video 04 Python Strings 04-Video <p>Statistics For Data Analysis Course Notes</p> Number Notebook Video Tutorial 00 Essential Statistical Concepts 00-Tutorial 01 Structured and Unstructured Data 01-Tutorial <p></p>"},{"location":"00_what_is_python/","title":"00. What is Python","text":""},{"location":"00_what_is_python/#00-what-is-python","title":"00. What is python?\u00b6","text":"<ul> <li><p>Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace.</p> </li> <li><p>According Al Sweigart, Python is a language with syntax rules for writing what is deemed as valid Python code.</p> </li> <li><p>The Python interpreter goes ahead to read the source code which has been written in Python language and goes on to perform its instructions.</p> <p>It is interesting to note that there are over 250 programming languages in the world. Given this fact, one may ask why python isa good choice compared to the other languages? We shall see this is a moment.</p> </li> </ul> <p>Fun Fact: The name \"Python\" does not come from the snake, but from a British comedy group called Monty Python.</p>"},{"location":"00_what_is_python/#why-python","title":"Why python?\u00b6","text":"<ul> <li><p>Python is a language that is easy to pick up, understand and remember. That is especially true for beginners (first time programmers).The simplicity does not in any way limit the functional possibilities of the language.</p> </li> <li><p>It is also efficient because it enables programs to accomplish more with a few lines of code compared to other languages.</p> </li> <li><p>It is also essential in that one writes codes that is easy to read and also easy to debug.It's readability means that it is easily reusable and maintainable.</p> <p>Debugging means identifying and removing errors in a code.</p> </li> <li><p>Python has become very popular and that means that it has a very large community.</p> </li> <li><p>Despite most of the reasons for its use, the quality and productivity of the code sets it apart</p> </li> </ul>"},{"location":"00_what_is_python/#reference-and-further-reading","title":"Reference and Further Reading\u00b6","text":"<ul> <li><p>https://towardsdatascience.com/top-10-resources-to-become-a-data-scientist-in-2020-99a315194701</p> </li> <li><p>Automate The Boring Stuff By A L S W E I G A R T</p> </li> <li><p>Python Crash Course By Eric Matthes</p> </li> <li><p>https://docs.python.org/3/tutorial/</p> </li> <li><p>https://docs.python.org/3/faq/general.html#what-is-python</p> </li> <li><p>Learning Python By  Mark Lutz</p> </li> </ul>"},{"location":"01_Structured_and_Unstructured_Data/","title":"01. Structured and Unstructured Data","text":"<p>In this notebook we will;</p> <ul> <li>Download the Olympics Dataset, which we will utilize to provide practical code examples.</li> <li>Define structured and unstructured data.</li> <li>Delve into the fundamental classifications of structured data, namely numerical and categorical types.</li> <li>Look at the preferred methods for visualizing structured data.</li> </ul> In\u00a0[15]: Copied! <pre>#Import Libraries\n\nimport pandas as pd\nimport numpy as np\n</pre> #Import Libraries  import pandas as pd import numpy as np <p> Image 1: Source; Kaggle</p> <p>Install the <code>opendatasets</code> library</p> <p>Use the <code>opendatasets.download</code> helper function. Get Kaggle Credentials.</p> <ul> <li>Download <code>Kaggle.json</code> file.</li> <li>Enter your user name and Kaggle API or store the <code>Kaggle.json</code> file in the same directory with the Jupyter notebook.</li> </ul> <p>Query the directory where the dataset has been downloaded to using the OS Module.</p> In\u00a0[16]: Copied! <pre># Use opendatasets library to download olympics data from kaggle\n\nimport opendatasets as od\ndownload_url = 'https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results'\nod.download(download_url)\n</pre> # Use opendatasets library to download olympics data from kaggle  import opendatasets as od download_url = 'https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results' od.download(download_url) <pre>Skipping, found downloaded files in \".\\120-years-of-olympic-history-athletes-and-results\" (use force=True to force download)\n</pre> In\u00a0[17]: Copied! <pre>#Use OS to access the data dir\n\nimport os\ndata_dir = \"./120-years-of-olympic-history-athletes-and-results\"\nos.listdir(data_dir)\n</pre> #Use OS to access the data dir  import os data_dir = \"./120-years-of-olympic-history-athletes-and-results\" os.listdir(data_dir)  Out[17]: <pre>['athlete_events.csv', 'noc_regions.csv']</pre> In\u00a0[18]: Copied! <pre>data_filename = data_dir + \"/athlete_events.csv\"\n</pre> data_filename = data_dir + \"/athlete_events.csv\" <p> </p> <p>Image 2: Reading and Writing Tabular Data (Source;Pandas Documentation)</p> In\u00a0[19]: Copied! <pre># Read the dataset\n\nolympics_df = pd.read_csv(data_filename)\n</pre> # Read the dataset  olympics_df = pd.read_csv(data_filename) <p>There are various types of variables, each capturing different types of data. Importantly, the specific type of data influences the knowledge that can be derived from it, as well as what cannot be acquired. Therefore, it is essential to comprehend the different data types.</p> <p> Image 3 : Source;Big Data Framework</p> <p>The differentiation between quantitative and qualitative data represents the fundamental basis for categorizing data types.</p> <p>Structured data refers to data that possesses a well-defined internal framework. Such data is meticulously organized and can be easily understood and interpreted. It is commonly stored in table formats, comprising rows and columns, with the data in each column sharing a consistent semantic significance.</p> <p>Unstructured data, refers to data that has no predetermined internal structure, thus existing independently from one another. Unstructured data encompasses various forms that cannot be stored within a structured database format. Although unstructured data may possess inherent structures, these structures are not explicitly predefined. Examples of unstructured data include text files such as PDF and DOC formats, as well as media files encompassing audio, video, and images.</p> <p>  Image 5 : Representation of data in tabular form with rows and columns  Image Source:Embeddings for Tabular Data: A Survey</p> In\u00a0[20]: Copied! <pre>olympics_df.head(10)\n</pre> olympics_df.head(10) Out[20]: ID Name Sex Age Height Weight Team NOC Games Year Season City Sport Event Medal 0 1 A Dijiang M 24.0 180.0 80.0 China CHN 1992 Summer 1992 Summer Barcelona Basketball Basketball Men's Basketball NaN 1 2 A Lamusi M 23.0 170.0 60.0 China CHN 2012 Summer 2012 Summer London Judo Judo Men's Extra-Lightweight NaN 2 3 Gunnar Nielsen Aaby M 24.0 NaN NaN Denmark DEN 1920 Summer 1920 Summer Antwerpen Football Football Men's Football NaN 3 4 Edgar Lindenau Aabye M 34.0 NaN NaN Denmark/Sweden DEN 1900 Summer 1900 Summer Paris Tug-Of-War Tug-Of-War Men's Tug-Of-War Gold 4 5 Christine Jacoba Aaftink F 21.0 185.0 82.0 Netherlands NED 1988 Winter 1988 Winter Calgary Speed Skating Speed Skating Women's 500 metres NaN 5 5 Christine Jacoba Aaftink F 21.0 185.0 82.0 Netherlands NED 1988 Winter 1988 Winter Calgary Speed Skating Speed Skating Women's 1,000 metres NaN 6 5 Christine Jacoba Aaftink F 25.0 185.0 82.0 Netherlands NED 1992 Winter 1992 Winter Albertville Speed Skating Speed Skating Women's 500 metres NaN 7 5 Christine Jacoba Aaftink F 25.0 185.0 82.0 Netherlands NED 1992 Winter 1992 Winter Albertville Speed Skating Speed Skating Women's 1,000 metres NaN 8 5 Christine Jacoba Aaftink F 27.0 185.0 82.0 Netherlands NED 1994 Winter 1994 Winter Lillehammer Speed Skating Speed Skating Women's 500 metres NaN 9 5 Christine Jacoba Aaftink F 27.0 185.0 82.0 Netherlands NED 1994 Winter 1994 Winter Lillehammer Speed Skating Speed Skating Women's 1,000 metres NaN <p>Structured data can be categorized into two basic types: numerical and categorical.</p> In\u00a0[21]: Copied! <pre>#All columns in the dataframe\n\nolympics_df.columns\n</pre> #All columns in the dataframe  olympics_df.columns Out[21]: <pre>Index(['ID', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Team', 'NOC', 'Games',\n       'Year', 'Season', 'City', 'Sport', 'Event', 'Medal'],\n      dtype='object')</pre> <p> </p> <p>Image 6 : Pandas Data Table (Source; Pandas Documentation)</p> In\u00a0[22]: Copied! <pre># Concise summary of a DataFrame to explore the basic data types in a pandas data frame\nolympics_df.info()\n</pre> # Concise summary of a DataFrame to explore the basic data types in a pandas data frame olympics_df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 271116 entries, 0 to 271115\nData columns (total 15 columns):\n #   Column  Non-Null Count   Dtype  \n---  ------  --------------   -----  \n 0   ID      271116 non-null  int64  \n 1   Name    271116 non-null  object \n 2   Sex     271116 non-null  object \n 3   Age     261642 non-null  float64\n 4   Height  210945 non-null  float64\n 5   Weight  208241 non-null  float64\n 6   Team    271116 non-null  object \n 7   NOC     271116 non-null  object \n 8   Games   271116 non-null  object \n 9   Year    271116 non-null  int64  \n 10  Season  271116 non-null  object \n 11  City    271116 non-null  object \n 12  Sport   271116 non-null  object \n 13  Event   271116 non-null  object \n 14  Medal   39783 non-null   object \ndtypes: float64(3), int64(2), object(10)\nmemory usage: 31.0+ MB\n</pre> In\u00a0[23]: Copied! <pre># Prints a summary of columns count and its dtypes but not per column information:\n\nolympics_df.info(verbose=False)\n</pre> # Prints a summary of columns count and its dtypes but not per column information:  olympics_df.info(verbose=False) <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 271116 entries, 0 to 271115\nColumns: 15 entries, ID to Medal\ndtypes: float64(3), int64(2), object(10)\nmemory usage: 31.0+ MB\n</pre> <p>Quantitative data, also known as numerical data, is recorded as numbers and serves as an objective measurement or count. It encompasses various factors such as temperature, weight, and the number of transactions.</p> In\u00a0[24]: Copied! <pre># Get numeric columns only\n\nolympics_df_numerics =  olympics_df.select_dtypes(include=np.number)\n</pre> # Get numeric columns only  olympics_df_numerics =  olympics_df.select_dtypes(include=np.number) In\u00a0[25]: Copied! <pre>olympics_df_numerics.head(10)\n</pre> olympics_df_numerics.head(10) Out[25]: ID Age Height Weight Year 0 1 24.0 180.0 80.0 1992 1 2 23.0 170.0 60.0 2012 2 3 24.0 NaN NaN 1920 3 4 34.0 NaN NaN 1900 4 5 21.0 185.0 82.0 1988 5 5 21.0 185.0 82.0 1988 6 5 25.0 185.0 82.0 1992 7 5 25.0 185.0 82.0 1992 8 5 27.0 185.0 82.0 1994 9 5 27.0 185.0 82.0 1994 <p>Numeric data can be classified into two types:</p> <ul> <li>Continuous data is data that can take on any value within a given range, such as wind speed or time duration.</li> </ul> <ul> <li>Continuous data can be divided into two types based on the scales of measurement used for their measurement.</li> </ul> <ul> <li>These scales lack a zero measurement, as is the case in the Celsius scale, which does not indicate the absence of temperature despite having a zero measure. This absence of a true zero point can be significant when interpreting statistical data.</li> </ul> <ul> <li>These scales possess a measurement of zero which signifies the absence of a particular property. To illustrate, zero kilograms indicates the absence of weight. As a result, measurement ratios hold significance for these scales. For instance, 30 kg is three times the weight of 10 kg. Furthermore, you can perform addition, subtraction, multiplication, and division operations with values on an interval scale.</li> </ul> <p>Continuous variables allow for the assessment of various properties, including but not limited to the mean, median, distribution, range, and standard deviation. These measures provide valuable insights into the characteristics of the data.</p> <ul> <li>Discrete data is data that can only take on certain values, such as the count of the occurrence of an event. An example is the number of Children.</li> </ul> <ul> <li>These counts are non-negative whole numbers that cannot be further divided into smaller increments.</li> </ul> <ul> <li>When dealing with discrete variables, it is possible to compute and evaluate the frequency or a summary of the count, such as the mean, sum, and standard deviation. As an illustration, in the year 2014, the average number of vehicles in U.S. households was 2.</li> </ul> <p>Nevertheless, certain numerical variables, like area codes, are not classified as quantitative variables since they lack variability in quantity. To illustrate, a bank may be concerned with determining the average loan size provided to its customers, but calculating an \"average\" area code would be nonsensical.</p> <p>When examining quantitative variables, it is essential to focus on two significant aspects: the central tendency and the variability (often referred to as \"spread\") of the data. For example, one might inquire about the average annual precipitation and the extent of variation observed from year to year.</p> <p>A variable is referred to as categorical when each observation is assigned to one of a predefined set of categories.</p> <ul> <li>Gender is divided into two categories: male and female. Religious affiliation encompasses various categories including Catholic,Jewish,Muslim, Protestant, Other, and None.</li> </ul> <ul> <li>When dealing with categorical variables, it is crucial to analyze the number of observations across different categories. One essential aspect to consider is the proportion or percentage of individuals falling into each category. For instance, one might be interested in determining the percentage of students who identify as Democrats within a particular college.</li> </ul> In\u00a0[26]: Copied! <pre># Method 1 : Get categorical columns only\n\nolympics_df_categorical =  olympics_df.select_dtypes(include=np.object_)\n</pre> # Method 1 : Get categorical columns only  olympics_df_categorical =  olympics_df.select_dtypes(include=np.object_) In\u00a0[27]: Copied! <pre>olympics_df_categorical.head(10)\n</pre> olympics_df_categorical.head(10) Out[27]: Name Sex Team NOC Games Season City Sport Event Medal 0 A Dijiang M China CHN 1992 Summer Summer Barcelona Basketball Basketball Men's Basketball NaN 1 A Lamusi M China CHN 2012 Summer Summer London Judo Judo Men's Extra-Lightweight NaN 2 Gunnar Nielsen Aaby M Denmark DEN 1920 Summer Summer Antwerpen Football Football Men's Football NaN 3 Edgar Lindenau Aabye M Denmark/Sweden DEN 1900 Summer Summer Paris Tug-Of-War Tug-Of-War Men's Tug-Of-War Gold 4 Christine Jacoba Aaftink F Netherlands NED 1988 Winter Winter Calgary Speed Skating Speed Skating Women's 500 metres NaN 5 Christine Jacoba Aaftink F Netherlands NED 1988 Winter Winter Calgary Speed Skating Speed Skating Women's 1,000 metres NaN 6 Christine Jacoba Aaftink F Netherlands NED 1992 Winter Winter Albertville Speed Skating Speed Skating Women's 500 metres NaN 7 Christine Jacoba Aaftink F Netherlands NED 1992 Winter Winter Albertville Speed Skating Speed Skating Women's 1,000 metres NaN 8 Christine Jacoba Aaftink F Netherlands NED 1994 Winter Winter Lillehammer Speed Skating Speed Skating Women's 500 metres NaN 9 Christine Jacoba Aaftink F Netherlands NED 1994 Winter Winter Lillehammer Speed Skating Speed Skating Women's 1,000 metres NaN <ul> <li><p>Histograms are a highly effective method for visually representing continuous variables, as they vividly illustrate the distribution of values.</p> </li> <li><p>Scatterplots serve as excellent tools for visually representing the connection between two continuous variables.</p> </li> <li><p>Bar charts are a commonly used method for visually representing discrete variables.</p> </li> </ul>"},{"location":"01_Structured_and_Unstructured_Data/#introduction","title":"Introduction\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#download-olympics-dataset","title":"Download Olympics Dataset\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#numerical-data","title":"Numerical Data\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#continuous","title":"Continuous\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#interval-scales","title":"Interval scales:\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#ratio-scales","title":"Ratio scales:\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#discrete","title":"Discrete\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#categorical-data","title":"Categorical Data\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#visualization-of-structured-data","title":"Visualization of structured data\u00b6","text":""},{"location":"01_Structured_and_Unstructured_Data/#reference-and-further-reading","title":"Reference and Further Reading\u00b6","text":"<ul> <li>Embeddings for Tabular Data: A Survey by Rajat Singh and Srikanta Bedathur</li> <li>Practical Statistics for Data Scientists by Peter Bruce, Andrew Bruce, and Peter Gedeck</li> <li>Introduction to Statistics AN INTUITIVE GUIDE by Jim Frost</li> <li>Pandas Documentation</li> </ul>"},{"location":"01_variables_in_python/","title":"01. Python Variables","text":"In\u00a0[1]: Copied! <pre>text = \"Hello World\"\nmessage = \"Welcome to the Data Armory\" # = sign is the assignment operator\nscore = 12 #12 is the value\n\n# In line 1 `Text` is the variable name\n# In line 2 `=` sign is the assignment operator\n# In line 3 `12` is the value\n</pre> text = \"Hello World\" message = \"Welcome to the Data Armory\" # = sign is the assignment operator score = 12 #12 is the value  # In line 1 `Text` is the variable name # In line 2 `=` sign is the assignment operator # In line 3 `12` is the value <p>NB:</p> <ul> <li>The type of variable will be the type of value that it refers to.</li> <li>Once Stored you can use it anywhere else.</li> </ul> <ul> <li>You can always assign different values to different variables.</li> </ul> In\u00a0[2]: Copied! <pre>#Code Example\na,b,c = 10,'come','again!'\n</pre> #Code Example a,b,c = 10,'come','again!' <ul> <li>You can also assign one value to different variables.</li> </ul> In\u00a0[3]: Copied! <pre>#Code Example\na,b,c = 10,'come','again!'\n</pre> #Code Example a,b,c = 10,'come','again!' <ul> <li>You can also assign one value to different variables.</li> </ul> In\u00a0[4]: Copied! <pre>#Code Example\nd = e= f = 100\n</pre> #Code Example d = e= f = 100 In\u00a0[5]: Copied! <pre>#Code Example\nstudent  = 'Ken'\nprint(student)\n</pre> #Code Example student  = 'Ken' print(student) <pre>Ken\n</pre> <ul> <li>You SHOULD separate words with underscores and not spaces.</li> </ul> In\u00a0[6]: Copied! <pre>#Code Example\nstudent_name = 'Ken'\nprint(student_name)\n</pre> #Code Example student_name = 'Ken' print(student_name) <pre>Ken\n</pre> In\u00a0[7]: Copied! <pre>#Code Example\n\nstudent_name = 'George'\nprint(student_name)\n</pre> #Code Example  student_name = 'George' print(student_name) <pre>George\n</pre> <ul> <li>When naming variable's we SHOULD only use alpha-numeric characters (letters and numbers) and the underscore character.</li> </ul> In\u00a0[8]: Copied! <pre>#Code Example\n\nstudent_1 = 'Mary'\nprint(student_1)\n</pre> #Code Example  student_1 = 'Mary' print(student_1) <pre>Mary\n</pre> <ul> <li>You SHOULD NOT start a variable name with a number, but you CAN start with a letter or an underscore character.</li> </ul> In\u00a0[9]: Copied! <pre>#Code Example\n\nstudent* = 'Caro\n</pre> #Code Example  student* = 'Caro <pre>\n  File \"C:\\Users\\USER\\AppData\\Local\\Temp/ipykernel_8464/1576765152.py\", line 3\n    student* = 'Caro\n             ^\nSyntaxError: invalid syntax\n</pre> <ul> <li>Breaking this rule will give you an invalid decimal literal or syntax error</li> </ul> In\u00a0[10]: Copied! <pre>#Code Example\n\n1_student = 'Henry'\n_student = 'John'\n_student\n</pre> #Code Example  1_student = 'Henry' _student = 'John' _student <pre>\n  File \"C:\\Users\\USER\\AppData\\Local\\Temp/ipykernel_8464/3822651473.py\", line 3\n    1_student = 'Henry'\n     ^\nSyntaxError: invalid decimal literal\n</pre> <ul> <li>A variable name SHOULD start with a letter or the underscore character.</li> <li>You SHOULD NOT use python keywords and function names as variable names.</li> </ul> In\u00a0[11]: Copied! <pre>pass = 'John'\n</pre> pass = 'John' <pre>\n  File \"C:\\Users\\USER\\AppData\\Local\\Temp/ipykernel_8464/1289231500.py\", line 1\n    pass = 'John'\n         ^\nSyntaxError: invalid syntax\n</pre> <ul> <li><p>Variable names are case sensitive</p> <p>message, Message, MESSAGE and MeSsAge are different</p> </li> </ul> In\u00a0[12]: Copied! <pre>#Code Example\n\nmessage = 'Come here'\nMessage = 'Welcome  home'\nMESSAGE = 'This is the  data armory'\nMeSSaGe = 'Thank  for watching'\n</pre> #Code Example  message = 'Come here' Message = 'Welcome  home' MESSAGE = 'This is the  data armory' MeSSaGe = 'Thank  for watching' In\u00a0[13]: Copied! <pre>print(message)\nprint(Message)\nprint(MESSAGE)\nprint(MeSSaGe)\n</pre> print(message) print(Message) print(MESSAGE) print(MeSSaGe) <pre>Come here\nWelcome  home\nThis is the  data armory\nThank  for watching\n</pre> <ul> <li><p>Ensure that variable names are;</p> <p>Short: though they can be long.</p> <p>Descriptive: That is can tell what the variable is used for.</p> </li> </ul> In\u00a0[14]: Copied! <pre># code Example\n\nweather_df = \"Australia.csv\"\ndata = \"Australia.csv\"\n</pre> # code Example  weather_df = \"Australia.csv\" data = \"Australia.csv\" <ul> <li><p>Take note that some letters like lowercase l and uppercase letter O can easily be confused with number 1 and 0.</p> </li> <li><p>While it is legal to use upper case letters;</p> <p>Others think it is a good idea to start variable names with lower case letter.</p> <p>Others believe that they better use camel case than separate names with</p> <p>Other avoid starting variables names with an underscore, unless when they are writing library code.</p> </li> </ul>"},{"location":"01_variables_in_python/#variables-in-python","title":"Variables in Python.\u00b6","text":"<ul> <li><p>In python, a variable is a name that is used to hold/store a value or an object.</p> <p>A value in this case, is the information that is stored/linked to a variable.</p> <p>A value can be a string of letters (string) or a number (integer.)</p> </li> <li><p>A variable is given a value using the equal sign/ assignment operator.</p> </li> <li><p>For an assignment statement</p> </li> <li><p>We need a variable name,assignment operator and the value.</p> </li> </ul> <p>Example:</p> <p><code>text = 'Hello World' (i)</code></p> <p><code>message = 'Welcome to the Data Armory' (ii)</code></p> <p><code>score = 12 (iii)</code></p> <p>NB:</p> <ul> <li>The type of variable will be  the type of value that it  refers to.</li> <li>Once Stored you can use it anywhere else.</li> </ul>"},{"location":"01_variables_in_python/#variable-names-rules-and-guidelines","title":"Variable Names Rules and Guidelines\u00b6","text":"<ul> <li><p>We have to agree that variable names are an essential part of the source code and meaningful names are important when it comes to program comprehension.</p> </li> <li><p>They serve as an implied documentation that conveys to the reader;</p> <p>The meaning of the code.</p> <p>The intention of the writer.</p> </li> <li><p>Considering that sometimes names are the only documentation, then clean code approach should be highly regarded.</p> </li> <li><p>Therefore, it is important to devote a considerable amount of time to the issue of variable naming and therefore the variable names and rules. Source</p> </li> <li><p>A variable name CAN be one word, though not a Must</p> </li> </ul>"},{"location":"01_variables_in_python/#references-and-further-reading","title":"References and Further Reading\u00b6","text":"<ul> <li>Python Built in Functions</li> <li>Python Key Words</li> <li>Function and Variable Names</li> <li>Automate the boring stuff by Al Sweigart</li> <li>Python Crash Course By Eric Matthes</li> <li>Python For Everybody By Dr. Charles Russell Severance</li> <li>How Developers Choose Names</li> </ul>"},{"location":"02_data_frames/","title":"02. Data Frames","text":"<p>A <code>DataFrame</code> is a structured representation of tabular data, taking the form of a rectangular table. It comprises an organized assortment of columns, each capable of holding various value types such as <code>numeric, string, boolean,</code> and others.It resembles the layout of a spreadsheet(see image 1 below) or a database table.</p> <ul> <li>A table is a grid of rows and columns that store data. Each row holds a collection of columns, and each column contains data of a specified type</li> </ul> <ul> <li>Understanding tables is fundamental to understanding the data in your database</li> </ul> <p>  Image 1: Representation of data in tabular form with rows and columns.  Source:Embeddings for Tabular Data: A Survey</p> <p>The <code>DataFrame</code> (see image below) comprises one row for each record , and one column for each variable.</p> <p> </p> <p>Image 2: A DataFrame  Source: Pandas Documentation</p> <p>A good example of where these names have been used is in the about section of the Spotify Song Attributes Dataset.</p> <p> Image 3: Spotify Song Attributes Dataset on Kaggle</p> <p>The processing and manipulation of unstructured data are essential to transform it into a structured format, represented as a set of features within rectangular data. For instance, a common method used for this purpose is webscraping.</p> <p>The dataset will be instrumental in presenting a pandas <code>DataFrame</code> effectively.</p> In\u00a0[1]: Copied! <pre>#import pandas\n\nimport pandas as pd\nimport os\n</pre> #import pandas  import pandas as pd import os In\u00a0[2]: Copied! <pre># Use opendatasets library to download o data from kaggle\n\nimport opendatasets as od\ndownload_url = 'https://www.kaggle.com/datasets/byomokeshsenapati/spotify-song-attributes'\nod.download(download_url)\n</pre> # Use opendatasets library to download o data from kaggle  import opendatasets as od download_url = 'https://www.kaggle.com/datasets/byomokeshsenapati/spotify-song-attributes' od.download(download_url) <pre>Skipping, found downloaded files in \".\\spotify-song-attributes\" (use force=True to force download)\n</pre> In\u00a0[3]: Copied! <pre>#Use OS to access the data dir\n\nimport os\ndata_dir = \"./spotify-song-attributes\"\nos.listdir(data_dir)\n</pre> #Use OS to access the data dir  import os data_dir = \"./spotify-song-attributes\" os.listdir(data_dir) Out[3]: <pre>['Spotify_Song_Attributes.csv']</pre> In\u00a0[4]: Copied! <pre>#Use OS to access the data dir\n\nimport os\ndata_dir = \"./spotify-song-attributes\"\nos.listdir(data_dir)\n</pre> #Use OS to access the data dir  import os data_dir = \"./spotify-song-attributes\" os.listdir(data_dir) Out[4]: <pre>['Spotify_Song_Attributes.csv']</pre> In\u00a0[5]: Copied! <pre>data_filename = data_dir + '/Spotify_Song_Attributes.csv'\n</pre> data_filename = data_dir + '/Spotify_Song_Attributes.csv' In\u00a0[6]: Copied! <pre>#Read the dataset CSV file\nspotify_df = olympics_df = pd.read_csv(data_filename)\n</pre> #Read the dataset CSV file spotify_df = olympics_df = pd.read_csv(data_filename) In\u00a0[7]: Copied! <pre>#Print out the dataframe\nspotify_df\n</pre> #Print out the dataframe spotify_df Out[7]: trackName artistName msPlayed genre danceability energy key loudness mode speechiness ... liveness valence tempo type id uri track_href analysis_url duration_ms time_signature 0 \"Honest\" Nico Collins 191772 NaN 0.476 0.799 4.0 -4.939 0.0 0.2120 ... 0.2570 0.577 162.139 audio_features 7dTxqsaFGHOXwtzHINjfHv spotify:track:7dTxqsaFGHOXwtzHINjfHv https://api.spotify.com/v1/tracks/7dTxqsaFGHOX... https://api.spotify.com/v1/audio-analysis/7dTx... 191948.0 4.0 1 \"In The Hall Of The Mountain King\" from Peer G... London Symphony Orchestra 1806234 british orchestra 0.475 0.130 7.0 -17.719 1.0 0.0510 ... 0.1010 0.122 112.241 audio_features 14Qcrx6Dfjvcj0H8oV8oUW spotify:track:14Qcrx6Dfjvcj0H8oV8oUW https://api.spotify.com/v1/tracks/14Qcrx6Dfjvc... https://api.spotify.com/v1/audio-analysis/14Qc... 150827.0 4.0 2 #BrooklynBloodPop! SyKo 145610 glitchcore 0.691 0.814 1.0 -3.788 0.0 0.1170 ... 0.3660 0.509 132.012 audio_features 7K9Z3yFNNLv5kwTjQYGjnu spotify:track:7K9Z3yFNNLv5kwTjQYGjnu https://api.spotify.com/v1/tracks/7K9Z3yFNNLv5... https://api.spotify.com/v1/audio-analysis/7K9Z... 145611.0 4.0 3 $10 Good Morning 25058 experimental pop 0.624 0.596 4.0 -9.804 1.0 0.0314 ... 0.1190 0.896 120.969 audio_features 3koAwrM1RO0TGMeQJ3qt9J spotify:track:3koAwrM1RO0TGMeQJ3qt9J https://api.spotify.com/v1/tracks/3koAwrM1RO0T... https://api.spotify.com/v1/audio-analysis/3koA... 89509.0 4.0 4 (I Just) Died In Your Arms Cutting Crew 5504949 album rock 0.625 0.726 11.0 -11.402 0.0 0.0444 ... 0.0625 0.507 124.945 audio_features 4ByEFOBuLXpCqvO1kw8Wdm spotify:track:4ByEFOBuLXpCqvO1kw8Wdm https://api.spotify.com/v1/tracks/4ByEFOBuLXpC... https://api.spotify.com/v1/audio-analysis/4ByE... 280400.0 4.0 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 10075 Younger with Time. Ben Zaidi 668478 folk-pop 0.537 0.143 2.0 -16.992 1.0 0.0331 ... 0.1100 0.245 131.118 audio_features 6o8pM5reLgjd5i8gDY3Irt spotify:track:6o8pM5reLgjd5i8gDY3Irt https://api.spotify.com/v1/tracks/6o8pM5reLgjd... https://api.spotify.com/v1/audio-analysis/6o8p... 222827.0 3.0 10076 Your Latest Trick - Remastered 1996 Dire Straits 304382 NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN 10077 Your Love Is My Drug (8 Bit Slowed) just valery 97600 sad lo-fi 0.282 0.158 6.0 -7.783 1.0 0.0311 ... 0.4740 0.248 65.152 audio_features 1EoThnDm6kQfB2idIfR30n spotify:track:1EoThnDm6kQfB2idIfR30n https://api.spotify.com/v1/tracks/1EoThnDm6kQf... https://api.spotify.com/v1/audio-analysis/1EoT... 112582.0 4.0 10078 Your Power Billie Eilish 988224 art pop 0.632 0.284 9.0 -14.025 0.0 0.0801 ... 0.2330 0.208 129.642 audio_features 042Sl6Mn83JHyLEqdK7uI0 spotify:track:042Sl6Mn83JHyLEqdK7uI0 https://api.spotify.com/v1/tracks/042Sl6Mn83JH... https://api.spotify.com/v1/audio-analysis/042S... 245897.0 4.0 10079 Your Voice / Bethel, NY Jaden 213626 pop rap 0.560 0.344 3.0 -12.283 1.0 0.0306 ... 0.1110 0.428 115.393 audio_features 3BcN2Pcy0kTG1zm8Tz9MsB spotify:track:3BcN2Pcy0kTG1zm8Tz9MsB https://api.spotify.com/v1/tracks/3BcN2Pcy0kTG... https://api.spotify.com/v1/audio-analysis/3BcN... 213627.0 3.0 <p>10080 rows \u00d7 22 columns</p> In\u00a0[8]: Copied! <pre># Concise summary of a DataFrame\nspotify_df.info()\n</pre> # Concise summary of a DataFrame spotify_df.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10080 entries, 0 to 10079\nData columns (total 22 columns):\n #   Column            Non-Null Count  Dtype  \n---  ------            --------------  -----  \n 0   trackName         10080 non-null  object \n 1   artistName        10080 non-null  object \n 2   msPlayed          10080 non-null  int64  \n 3   genre             8580 non-null   object \n 4   danceability      9530 non-null   float64\n 5   energy            9530 non-null   float64\n 6   key               9530 non-null   float64\n 7   loudness          9530 non-null   float64\n 8   mode              9530 non-null   float64\n 9   speechiness       9530 non-null   float64\n 10  acousticness      9530 non-null   float64\n 11  instrumentalness  9530 non-null   float64\n 12  liveness          9530 non-null   float64\n 13  valence           9530 non-null   float64\n 14  tempo             9530 non-null   float64\n 15  type              9530 non-null   object \n 16  id                9530 non-null   object \n 17  uri               9530 non-null   object \n 18  track_href        9530 non-null   object \n 19  analysis_url      9530 non-null   object \n 20  duration_ms       9530 non-null   float64\n 21  time_signature    9530 non-null   float64\ndtypes: float64(13), int64(1), object(8)\nmemory usage: 1.7+ MB\n</pre>"},{"location":"02_data_frames/#data-frames","title":"Data Frames\u00b6","text":""},{"location":"02_data_frames/#importance-of-dataframes","title":"Importance of DataFrames\u00b6","text":"<p>Comprehending <code>DataFrames</code> or rectangular data is of utmost importance for data analysts, as it lays the foundation for handling structured data in diverse analytical tasks.</p> <p><code>DataFrames</code> constitute a fundamental data structure prevalent in numerous programming languages and libraries, with Python's Pandas and R being notable examples.</p> <p>These <code>DataFrames</code> are commonly used to store and manipulate data in a tabular format, akin to a spreadsheet or a database table.</p>"},{"location":"02_data_frames/#download-spotify-song-attributes-dataset","title":"Download Spotify Song Attributes Dataset.\u00b6","text":""},{"location":"02_data_frames/#reference-and-further-reading","title":"Reference and Further Reading\u00b6","text":"<ul> <li>Embeddings for Tabular Data: A Survey by Rajat Singh and Srikanta Bedathur</li> <li>Practical Statistics for Data Scientists by Peter Bruce, Andrew Bruce, and Peter Gedeck</li> <li>Pandas Documentation</li> <li>Python for Data Analysis Data Wrangling with Pandas, NumPy, and IPython by Wes McKinney.</li> <li>Think Stats Exploratory Data Analysis in Python by Allen B. Downey and Green Tea Press.</li> </ul>"},{"location":"02_python_data_types/","title":"02. Data Types","text":"<ul> <li>Every value  that  is  held by a  variable has a data type.</li> </ul> In\u00a0[1]: Copied! <pre>name = 'Tony'\nstudents = 10\nheight = 10.5\n</pre> name = 'Tony' students = 10 height = 10.5 <ul> <li>To view the type you need to use the type() function.</li> </ul> In\u00a0[2]: Copied! <pre>#View Types\ntype(name)\n</pre> #View Types type(name) Out[2]: <pre>str</pre> <ul> <li><p>Although there are numerous data types, there are certain data types which are commonly used in Python.</p> </li> <li><p>Common data types are categorized under primitive data types, and these include integers, strings, Booleans, and floating points.</p> </li> <li><p>Other primitives include the Boolean and None Types.</p> </li> </ul> <ul> <li>This is data that has numeric  value</li> </ul> In\u00a0[3]: Copied! <pre>#Integer\ncars = 100\ntype(cars)\n</pre> #Integer cars = 100 type(cars) Out[3]: <pre>int</pre> In\u00a0[4]: Copied! <pre>#Negative Value\ntemperature = -25\ntype(temperature)\n</pre> #Negative Value temperature = -25 type(temperature) Out[4]: <pre>int</pre> In\u00a0[5]: Copied! <pre>#Negative Value\ntemperature = -25\ntype(temperature)\n</pre> #Negative Value temperature = -25 type(temperature) Out[5]: <pre>int</pre> In\u00a0[6]: Copied! <pre>#Float\nheight = 100.5\ntype(height)\n</pre> #Float height = 100.5 type(height) Out[6]: <pre>float</pre> <ul> <li>A string is a text value</li> </ul> In\u00a0[7]: Copied! <pre>#String\nmake = 'Toyota'\ntype(make)\n</pre> #String make = 'Toyota' type(make) Out[7]: <pre>str</pre> In\u00a0[8]: Copied! <pre>#Empty String\n\ncolor = ''\ntype(color)\n</pre> #Empty String  color = '' type(color) Out[8]: <pre>str</pre> In\u00a0[9]: Copied! <pre>#Number as a string\nnumber_of_children = '11'\ntype(number_of_children )\n</pre> #Number as a string number_of_children = '11' type(number_of_children ) Out[9]: <pre>str</pre> In\u00a0[10]: Copied! <pre>y = True\ntype(y)\n</pre> y = True type(y) Out[10]: <pre>bool</pre> In\u00a0[11]: Copied! <pre>x = False\ntype(x)\n</pre> x = False type(x) Out[11]: <pre>bool</pre> <ul> <li>The data type has a single value None which points to the absence of a value.</li> </ul> In\u00a0[12]: Copied! <pre>#Empty Value\nnumber_of_people = None\n</pre> #Empty Value number_of_people = None In\u00a0[13]: Copied! <pre># Check None-Type\ntype(number_of_people)\n</pre> # Check None-Type type(number_of_people) Out[13]: <pre>NoneType</pre> <ul> <li>You can specify a specific Data Type</li> </ul> In\u00a0[14]: Copied! <pre>#Specify String\ncount = str(11)\ntype(count)\n</pre> #Specify String count = str(11) type(count) Out[14]: <pre>str</pre> In\u00a0[15]: Copied! <pre>#Specify Integer\nheight = int(10.5)\ntype(height)\n</pre> #Specify Integer height = int(10.5) type(height)  Out[15]: <pre>int</pre> In\u00a0[16]: Copied! <pre># Operation on a string and an integer\n\nBus_one = '10'\nBus_two = 11\n\ntotal = Bus_one + Bus_two\n</pre> # Operation on a string and an integer  Bus_one = '10' Bus_two = 11  total = Bus_one + Bus_two <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n~\\AppData\\Local\\Temp/ipykernel_2004/785225065.py in &lt;module&gt;\n      4 Bus_two = 11\n      5 \n----&gt; 6 total = Bus_one + Bus_two\n\nTypeError: can only concatenate str (not \"int\") to str</pre> In\u00a0[17]: Copied! <pre># Correct Operation on a string and an integer\n\nBus_one = int('10')\nBus_two = 11\n\ntotal = Bus_one + Bus_two\n</pre> # Correct Operation on a string and an integer  Bus_one = int('10') Bus_two = 11  total = Bus_one + Bus_two In\u00a0[18]: Copied! <pre>total\n</pre> total Out[18]: <pre>21</pre> In\u00a0[19]: Copied! <pre>#Assignment  Concatenate a str to a str\n\nBus_one = '10'\nBus_two = str(11)\n\ntotal = Bus_one + Bus_two\n</pre> #Assignment  Concatenate a str to a str  Bus_one = '10' Bus_two = str(11)  total = Bus_one + Bus_two <ul> <li><p>Automate the boring stuff by Al Sweigart</p> </li> <li><p>Jovian.ai</p> </li> <li><p>GeeksforGeeks: Python Data Types</p> </li> <li><p>Python Crash Course By Eric Matthes</p> </li> </ul>"},{"location":"02_python_data_types/#common-python-data-types","title":"Common Python Data Types\u00b6","text":""},{"location":"02_python_data_types/#what-is-a-data-type","title":"What is a data type?\u00b6","text":"<ul> <li><p>A data type is basically a category in which a value belongs to.</p> <pre><code>&gt; Meaning that data types can be divided into categories like Numeric,Sequence Type etc.\n&gt; Knowing the data type helps one know the kind of operations that can be done on the value.</code></pre> </li> </ul>"},{"location":"02_python_data_types/#numeric","title":"Numeric\u00b6","text":""},{"location":"02_python_data_types/#integers","title":"Integers\u00b6","text":"<ul> <li>An integer is a value that is a whole number (+/-).</li> </ul>"},{"location":"02_python_data_types/#floats","title":"Floats\u00b6","text":"<ul> <li>A Float (Floating point number) is a number that has a decimal</li> </ul>"},{"location":"02_python_data_types/#sequence-type","title":"Sequence Type\u00b6","text":"<ul> <li><p>In python, a sequence is the ordered collection of data types that are either similar or different.</p> <p>An example of this includes strings, lists, and tuples.</p> </li> </ul>"},{"location":"02_python_data_types/#string","title":"String\u00b6","text":""},{"location":"02_python_data_types/#boolean","title":"Boolean\u00b6","text":"<ul> <li><p>This data type has either True or False built in values.</p> <pre><code> &gt; N/B: T and F have to be capitalized.</code></pre> </li> </ul>"},{"location":"02_python_data_types/#none-type","title":"None-Type\u00b6","text":""},{"location":"02_python_data_types/#references-further-reading","title":"References &amp; Further Reading\u00b6","text":""},{"location":"03_Mean/","title":"03 Mean","text":"<p>It represents the central location of the majority of the data and provides the best description for the dataset.</p> In\u00a0[44]: Copied! <pre>import numpy as np\nimport pandas as pd\nfrom scipy import stats\n</pre> import numpy as np import pandas as pd from scipy import stats   In\u00a0[45]: Copied! <pre># Olympics dataset absolute path\n\nfile = r'C:\\Users\\USER\\Machine_Learning\\Portfolio\\olympics_project\\Olympics_EDA\\120-years-of-olympic-history-athletes-and-results\\athlete_events.csv'\n\n#Read CSV\nolympics_df = pd.read_csv(file)\n</pre> # Olympics dataset absolute path  file = r'C:\\Users\\USER\\Machine_Learning\\Portfolio\\olympics_project\\Olympics_EDA\\120-years-of-olympic-history-athletes-and-results\\athlete_events.csv'  #Read CSV olympics_df = pd.read_csv(file) In\u00a0[46]: Copied! <pre>#DataFrame\n\nolympics_df\n</pre> #DataFrame  olympics_df Out[46]: ID Name Sex Age Height Weight Team NOC Games Year Season City Sport Event Medal 0 1 A Dijiang M 24.0 180.0 80.0 China CHN 1992 Summer 1992 Summer Barcelona Basketball Basketball Men's Basketball NaN 1 2 A Lamusi M 23.0 170.0 60.0 China CHN 2012 Summer 2012 Summer London Judo Judo Men's Extra-Lightweight NaN 2 3 Gunnar Nielsen Aaby M 24.0 NaN NaN Denmark DEN 1920 Summer 1920 Summer Antwerpen Football Football Men's Football NaN 3 4 Edgar Lindenau Aabye M 34.0 NaN NaN Denmark/Sweden DEN 1900 Summer 1900 Summer Paris Tug-Of-War Tug-Of-War Men's Tug-Of-War Gold 4 5 Christine Jacoba Aaftink F 21.0 185.0 82.0 Netherlands NED 1988 Winter 1988 Winter Calgary Speed Skating Speed Skating Women's 500 metres NaN ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 271111 135569 Andrzej ya M 29.0 179.0 89.0 Poland-1 POL 1976 Winter 1976 Winter Innsbruck Luge Luge Mixed (Men)'s Doubles NaN 271112 135570 Piotr ya M 27.0 176.0 59.0 Poland POL 2014 Winter 2014 Winter Sochi Ski Jumping Ski Jumping Men's Large Hill, Individual NaN 271113 135570 Piotr ya M 27.0 176.0 59.0 Poland POL 2014 Winter 2014 Winter Sochi Ski Jumping Ski Jumping Men's Large Hill, Team NaN 271114 135571 Tomasz Ireneusz ya M 30.0 185.0 96.0 Poland POL 1998 Winter 1998 Winter Nagano Bobsleigh Bobsleigh Men's Four NaN 271115 135571 Tomasz Ireneusz ya M 34.0 185.0 96.0 Poland POL 2002 Winter 2002 Winter Salt Lake City Bobsleigh Bobsleigh Men's Four NaN <p>271116 rows \u00d7 15 columns</p> <ul> <li>Mean is the most common measure of central tendency.</li> <li>It might not consistently serve as the optimal metric for determining a central value.</li> <li>The calculation of the mean incorporates all values in the data.</li> <li>If you change any value, the mean changes. However, the mean doesn\u2019t always locate the center of the data accurately.</li> <li>It is important when you have a symmetric distribution.</li> <li>It is important when working with continuous data.</li> </ul> In\u00a0[47]: Copied! <pre># Method 1: Mean of Olympians Age\n\nsum_of_age = olympics_df['Age'].sum()\nnumber_of_values = olympics_df['Age'].count()\n\nmean = sum_of_age/number_of_values\n\nprint('Athletes Mean:',mean)\n</pre> # Method 1: Mean of Olympians Age  sum_of_age = olympics_df['Age'].sum() number_of_values = olympics_df['Age'].count()  mean = sum_of_age/number_of_values  print('Athletes Mean:',mean) <pre>Athletes Mean: 25.556898357297374\n</pre> In\u00a0[48]: Copied! <pre># Method 2: Mean of Olympians Age\n\nmean_age = olympics_df['Age'].mean()\nprint('Athletes Mean:',mean_age)\n</pre> # Method 2: Mean of Olympians Age  mean_age = olympics_df['Age'].mean() print('Athletes Mean:',mean_age) <pre>Athletes Mean: 25.556898357297374\n</pre> In\u00a0[49]: Copied! <pre>#Youngest Olympian\n\nolympics_df[olympics_df['Age'] == 10]\n</pre> #Youngest Olympian  olympics_df[olympics_df['Age'] == 10] Out[49]: ID Name Sex Age Height Weight Team NOC Games Year Season City Sport Event Medal 142882 71691 Dimitrios Loundras M 10.0 NaN NaN Ethnikos Gymnastikos Syllogos GRE 1896 Summer 1896 Summer Athina Gymnastics Gymnastics Men's Parallel Bars, Teams Bronze <p>Weighted mean is also commonly used because;</p> <ul> <li>Some data are more variable than others.</li> <li>Data does not always represent differeNT  groups that are  being measured.</li> </ul> <p>Let use an example of a project that has two parts a written report worth 70% of the grade and a presentation worth 30%.</p> In\u00a0[\u00a0]: Copied! <pre>#Sample DataFrame\n\nResults = pd.DataFrame({'Name': ['Ken', 'Jane' ,'Margaret','Alice', 'John','William'],'Report': [90,56,67,83,54,69],'Presentation': [40,50,45,10,31,20]})\n\nResults\n</pre> #Sample DataFrame  Results = pd.DataFrame({'Name': ['Ken', 'Jane' ,'Margaret','Alice', 'John','William'],'Report': [90,56,67,83,54,69],'Presentation': [40,50,45,10,31,20]})  Results Out[\u00a0]: Name Report Presentation 0 Ken 90 40 1 Jane 56 50 2 Margaret 67 45 3 Alice 83 10 4 John 54 31 5 William 69 20 <p></p> In\u00a0[\u00a0]: Copied! <pre>Ken =  (90*0.7) + (40*0.3)\nJane = (56*0.7) + (50*0.3)\nMargaret = (67*0.7) + (45*0.3)\nAlice = (83*0.7) + (10*0.3)\nJohn = (54*0.7) + (31*0.3)\nWilliam = (69*0.7) + (20*0.3)\n</pre> Ken =  (90*0.7) + (40*0.3) Jane = (56*0.7) + (50*0.3) Margaret = (67*0.7) + (45*0.3) Alice = (83*0.7) + (10*0.3) John = (54*0.7) + (31*0.3) William = (69*0.7) + (20*0.3) In\u00a0[\u00a0]: Copied! <pre>wght = (Ken + Jane + Margaret + Alice + John + William)/6\nwght\n</pre> wght = (Ken + Jane + Margaret + Alice + John + William)/6 wght Out[\u00a0]: <pre>58.68333333333333</pre> In\u00a0[\u00a0]: Copied! <pre>Weighted_mean = ((Results['Report']* 0.7).sum() + (Results['Presentation'] * 0.3).sum())/Results['Presentation'].count()\n\nWeighted_mean\n</pre> Weighted_mean = ((Results['Report']* 0.7).sum() + (Results['Presentation'] * 0.3).sum())/Results['Presentation'].count()  Weighted_mean Out[\u00a0]: <pre>58.68333333333334</pre> In\u00a0[\u00a0]: Copied! <pre># Weighted Mean -Method 1\n\n((Results['Grade'] * Results['Weight'] ).sum()) / Results['Weight'].sum()\n</pre> # Weighted Mean -Method 1  ((Results['Grade'] * Results['Weight'] ).sum()) / Results['Weight'].sum() Out[\u00a0]: <pre>74.21052631578948</pre> In\u00a0[\u00a0]: Copied! <pre># Weighted Mean -Method 2\n\nnp.average(Results['Grade'] ,weights = Results['Weight'] )\n</pre> # Weighted Mean -Method 2  np.average(Results['Grade'] ,weights = Results['Weight'] ) Out[\u00a0]: <pre>74.21052631578948</pre> <p>You can determine this by excluding a set number of sorted values from the lower and upper tails and subsequently computing the average of the remaining values. It is common practice to take values between the 5th and 95th percentiles. For instance, a 5% trimmed mean omits the top 5% and bottom 5% of values, focusing on the central 90%. In simpler terms, it considers the middle 90%.</p> <ul> <li>A trimmed mean eliminates the influence of outliers, preventing them from easily distorting the mean.</li> <li>For instance, in an Olympic gymnastics competition with 9 judges, to deter favoritism among the judges, the highest and lowest scores are dropped. The final score is then determined by calculating the mean of the remaining 7 judges' scores.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>trimmed_mean = stats.trim_mean( olympics_df['Age'].dropna() , 0.1)\n\nprint('Trimmed Mean:', trimmed_mean )\n</pre> trimmed_mean = stats.trim_mean( olympics_df['Age'].dropna() , 0.1)  print('Trimmed Mean:', trimmed_mean ) <pre>Trimmed Mean: 24.874036137095466\n</pre> <p> </p> <p>Image 1: Shapes of Distributions (The University of Iowa)</p> <ul> <li>Skewed to the left (left-skewed): The mean and median are less than the mode.</li> <li>Skewed to the right (right-skewed): The mean and median are greater than the mode.</li> <li>Symmetric distribution: The mean, median, and mode are the same.</li> </ul> <p>https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm</p> <p>http://homepage.stat.uiowa.edu/~rdecook/stat1010/notes/Section_4.2_distribution_shapes.pdf</p> <p>Introduction to Statistics AN INTUITIVE GUIDE</p> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"03_Mean/#measures-of-central-tendency","title":"Measures Of Central Tendency\u00b6","text":""},{"location":"03_Mean/#mean","title":"Mean.\u00b6","text":"<p>The mean or average is calculated by dividing the sum of all values by the total number of values.</p>"},{"location":"03_Mean/#weighted-mean","title":"Weighted Mean.\u00b6","text":"<p>It involves multiplying each value by its corresponding weight, summing up these products, and then dividing the result by the total sum of the weights.</p>"},{"location":"03_Mean/#trimmed-mean","title":"Trimmed Mean\u00b6","text":""},{"location":"03_Mean/#mean-in-the-distributions","title":"Mean in the Distributions\u00b6","text":""},{"location":"03_Mean/#references-and-further-reading","title":"References and Further Reading\u00b6","text":""},{"location":"03_python_comments/","title":"03. Python Comments","text":"In\u00a0[1]: Copied! <pre>students = 10  # number of students at the data armory\nstudents\n</pre> students = 10  # number of students at the data armory students Out[1]: <pre>10</pre> <ul> <li>A comment is not an executable code.</li> </ul> In\u00a0[2]: Copied! <pre># Comments are not executable - This line will be ignored\n\nprint(\"The  data armory\")\n</pre> # Comments are not executable - This line will be ignored  print(\"The  data armory\") <pre>The  data armory\n</pre> In\u00a0[3]: Copied! <pre># Should not be within a string\nnew_students = \"Welcome to the data armory\"\nnew_students\n</pre> # Should not be within a string new_students = \"Welcome to the data armory\" new_students Out[3]: <pre>'Welcome to the data armory'</pre> <ul> <li><p>It is important to add notes to your code and within your programs;</p> <p>This is helpful for defining the purpose of your code or explaining specific sections of your code, especially when:</p> <ol> <li>Your code is longer and complex.</li> <li>It is essential to keep in mind the purpose of your code, such as the reason for using a particular function, especially when you experience memory lapses.</li> <li>Meaningful comments will help others understand your code.</li> <li>As a professional programmer you need meaningful code considering that you will collaborate with others.</li> <li>It is easy to delete comments than to go back to comment your code.</li> </ol> <p></p> </li> <li><p>Commenting out is when you put the # when trying to find out what is wrong in a program.</p> </li> </ul> In\u00a0[4]: Copied! <pre>x = 10\ny = 50\nz = 25\n\ntotal = x + y + z\ntotal\n</pre> x = 10 y = 50 z = 25  total = x + y + z total Out[4]: <pre>85</pre> In\u00a0[5]: Copied! <pre># Getting the sum of variables\n# Use a different variable to print the results\n\ny = 20\nx = 10\nw = 10\n\ntotal = y + x + w\ntotal\n</pre> # Getting the sum of variables # Use a different variable to print the results  y = 20 x = 10 w = 10  total = y + x + w total Out[5]: <pre>40</pre> <ul> <li>Blank lines after the comment are also ignored.</li> </ul> In\u00a0[6]: Copied! <pre># Getting the sum of values\n\ny = 20\nx = 10\n\ntotal = y + x\ntotal\n</pre> # Getting the sum of values  y = 20 x = 10  total = y + x total  Out[6]: <pre>30</pre> <ul> <li><p>The various methods for writing a comment are:</p> <pre><code>  * Placing it before the line of code\n  * Writing it next to the line of code\n  * Using a comment block (multiline comment)</code></pre> </li> </ul> In\u00a0[7]: Copied! <pre># Multiline Strings for commenting\n\n\nwelcome_message = \"\"\" Welcome to the\ndata armory\nfor python and \ndata science tutorials\"\"\"\n\n# Multiline Strings for commenting\n\n\nwelcome_message = \"\"\" Welcome to the\ndata armory\nfor python and \ndata science tutorials\"\"\"\n\n# Multiline Strings for commenting\n\n\nwelcome_message = \"\"\" Welcome to the\ndata armory\nfor python and \ndata science tutorials\"\"\"\n\nwelcome_message\n</pre> # Multiline Strings for commenting   welcome_message = \"\"\" Welcome to the data armory for python and  data science tutorials\"\"\"  # Multiline Strings for commenting   welcome_message = \"\"\" Welcome to the data armory for python and  data science tutorials\"\"\"  # Multiline Strings for commenting   welcome_message = \"\"\" Welcome to the data armory for python and  data science tutorials\"\"\"  welcome_message Out[7]: <pre>' Welcome to the\\ndata armory\\nfor python and \\ndata science tutorials'</pre> <ul> <li>Remember to place your comments either above or below the triple-quoted text, multiline comments, or block string, which are valid Python code.</li> </ul> In\u00a0[8]: Copied! <pre>\"\"\" In the university, freshman year  #refers to a first year student\n\n sophomore  refers  to a second year students\n\n Welcome to the data armory \n \n \"\"\"\n# Multiline comment\n</pre> \"\"\" In the university, freshman year  #refers to a first year student   sophomore  refers  to a second year students   Welcome to the data armory     \"\"\" # Multiline comment Out[8]: <pre>' In the university, freshman year  #refers to a first year student\\n\\n sophomore  refers  to a second year students\\n\\n Welcome to the data armory \\n \\n '</pre>"},{"location":"03_python_comments/#python-comments","title":"Python Comments\u00b6","text":""},{"location":"03_python_comments/#what-is-a-comment","title":"What is a Comment\u00b6","text":"<ul> <li>A comment can be defined as human-readable documentation\" is grammatically correct and does not require any further edits.</li> <li>To write a comment, start a new line with the # character.</li> <li>Anything that follows the # for the rest of the line is part of the comment.</li> <li>Single line comments are typically used before or next to code to provide context or explanations for the code.</li> <li>A comment should be concise and easily comprehensible.</li> </ul>"},{"location":"03_python_comments/#multiline-comments","title":"Multiline Comments\u00b6","text":""},{"location":"03_python_comments/#reference-and-further-reading","title":"Reference and Further Reading\u00b6","text":"<ul> <li>Automate the boring stuff by Al Sweigart-https://www.amazon.com/Automate-Boring-Stuff-Python-Programming/dp/1593275994</li> <li>Python Crash Course By Eric Matthes - https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_1?crid=2ANKISKNQPNKH&amp;keywords=Python+Crash+Course+By+Eric+Matthes&amp;qid=1654606797&amp;s=books&amp;sprefix=%2Cstripbooks-intl-ship%2C1078&amp;sr=1-1</li> <li>Ravikiran AS \"Comments in Python: Why are They Important And How to Use Them\" https://www.simplilearn.com/tutorials/python-tutorial/comments-in-python#:~:text=Comments%20in%20Python%20are%20identified,a%20multi%2Dline%20comment%20block.</li> <li>Ihechikara Vincent Abba \"Python Comment Block \u2013 How to Comment Out Code in Python\" https://www.freecodecamp.org/news/python-comment-block-how-to-comment-out-code-in-python/</li> </ul>"},{"location":"04_python_strings/","title":"04. Python Strings","text":"<ul> <li><p>Creating Strings: In Python, you have the option to create strings by enclosing text with either single quotes ('') or double quotes (\"\").</p> </li> <li><p>Accessing Characters: Indexing or slicing allows you to obtain specific characters within a string.</p> </li> <li><p>String Concatenation: You have the option of combining strings either by utilizing the + operator or through the implementation of the += operator.</p> </li> <li><p>String Methods: Python offers an extensive array of pre-installed string methods that can be utilized to handle strings, such as upper(), lower(), strip(), replace(), and numerous others.</p> </li> <li><p>String Formatting: Python offers several approaches for string formatting, such as utilizing the format() technique and f-strings.</p> </li> <li><p>Escape Sequences: Special characters known as escape sequences enable the representation of characters in a string that would otherwise be challenging to express, such as quotes, newlines, and tabs.</p> </li> <li><p>String Operations: Python offers a variety of operators that can be utilized to conduct actions on strings, including but not limited to comparison operators, membership operators, and logical operators.</p> </li> <li><p>Use escape characters for special characters such as quotation marks.</p> </li> <li><p>Create powerful and efficient programs using strings.</p> </li> <li><p>Format text, create patterns, and even encrypt data with strings.</p> </li> </ul> <ul> <li><p>\"Strings\" are utilized extensively across various domains, serving purposes like preserving and modifying textual information, indicating identities, locations, and other types of data that can be conveyed as text.</p> </li> <li><p>Python offers an extensive range of string methods that facilitate the manipulation and handling of strings in diverse ways. These methods simplify the execution of routine tasks, such as changing strings to uppercase or lowercase, substituting substrings, and segmenting strings into lists.</p> </li> <li><p>Strings are immutable meaning they cannot be altered once they are created, providing reassurance that the value of a string will not change unexpectedly. This characteristic can prove advantageous in specific scenarios since it ensures that the string's value remains constant and predictable.</p> </li> <li><p>Python includes built in support for strings, eliminating the need to import external libraries or modules to manipulate them. This simplifies working with strings and streamlines your code's complexity, making it simpler to begin working with strings.</p> </li> <li><p>Python offers a succinct syntax for generating and manipulating strings, rendering it effortless to compose and comprehend code that handles strings.</p> </li> </ul> <ul> <li><p>When working with substantial amounts of text data, strings may not be the most efficient option. If, for example, you need to execute numerous string operations, like substituting substrings or dividing the string into several substrings, it can be sluggish and require significant resources.</p> </li> <li><p>Representing complex data structures like lists or dictionaries using strings can pose a challenge. In such situations, it would be more effective to use an alternative data type, like a list or a dictionary, to accurately capture the data.</p> </li> </ul> <ul> <li><p>Web development: Python is a popular language for web development, and developers use Python strings to dynamically create HTML, CSS, and JavaScript code.</p> </li> <li><p>Data analysis: In data analysis, strings are frequently used to store text-based data like customer feedback, social media posts, or product descriptions. Python strings are useful for data cleaning, normalization, and processing to extract insights.</p> </li> <li><p>Natural Language Processing (NLP): NLP is a subfield of AI that involves processing and analyzing human language. Python strings are crucial in NLP, where they are used to store and manipulate text data, including text classification, sentiment analysis, and named entity recognition.</p> </li> <li><p>Automation: Python strings are widely used in automation tasks to process and manipulate file paths, automate email sending, and generate reports.</p> </li> <li><p>Scientific computing: In scientific computing, strings are used to store and process data related to scientific research. For instance, scientists may use Python strings to store DNA sequences, chemical structures, or astronomical data.</p> </li> </ul> <ul> <li>In Python A string is a sequence of characters. No more, no less.</li> <li>In Python, anything inside quotation marks is referred to as a \"string\".</li> <li>You can use either single or double quotes.</li> <li>Using double quotes has the advantage of allowing a single quote character to be included in the string.</li> <li>Strings may also be created from other objects using the str constructor.</li> </ul> <p>#Double Quotes</p> In\u00a0[1]: Copied! <pre>#Code Example\n\nmiddle_name = 'Mary'\ntype(middle_name)\n</pre> #Code Example  middle_name = 'Mary' type(middle_name) Out[1]: <pre>str</pre> In\u00a0[13]: Copied! <pre>#Code Example\n\nlast_name = \" Oaks\"\n\nlast_name\n</pre> #Code Example  last_name = \" Oaks\"  last_name Out[13]: <pre>' Oaks'</pre> In\u00a0[9]: Copied! <pre>type(last_name)\n</pre> type(last_name) Out[9]: <pre>str</pre> <ul> <li>The <code>+</code> operator combines two strings into one(Concatenates)</li> </ul> In\u00a0[11]: Copied! <pre>#Code Example\n</pre> #Code Example    Out[11]: <pre>'Mary Oaks'</pre> In\u00a0[14]: Copied! <pre>\n</pre> Out[14]: <pre>'Mary Oaks'</pre> <ul> <li>If several string literals are placed together, they will be combined into a single string.</li> </ul> In\u00a0[19]: Copied! <pre>#Code Example\n\nschool_name = 'The' ' Data' ' Armory' ' Academy'\nschool_name\n</pre> #Code Example  school_name = 'The' ' Data' ' Armory' ' Academy' school_name Out[19]: <pre>'The Data Armory Academy'</pre> <ul> <li>This feature is especially helpful when needing to divide long strings.</li> </ul> <ul> <li>NB: Put  strings within parentheses.</li> </ul> In\u00a0[21]: Copied! <pre>#Code Example\n\ncountry_names =('Kenya' 'Uganda' 'Tanzania')\n\nprint(country_names)\n</pre> #Code Example  country_names =('Kenya' 'Uganda' 'Tanzania')  print(country_names) <pre>KenyaUgandaTanzania\n</pre> <ul> <li>It is not possible to concatenate a variable and a string literal.</li> </ul> In\u00a0[1]: Copied! <pre>#Code Example\n</pre> #Code Example    <ul> <li>Use the + operator to concatenate variables or a variable and a literal.</li> </ul> In\u00a0[28]: Copied! <pre>#Code Example\n\nfirst_name = 'Kelly'\nmiddle_name = 'Rowland'\n\nstudents_name = first_name + ' ' + middle_name\nstudents_name\n</pre> #Code Example  first_name = 'Kelly' middle_name = 'Rowland'  students_name = first_name + ' ' + middle_name students_name Out[28]: <pre>'Kelly Rowland'</pre> In\u00a0[29]: Copied! <pre>students_name = first_name  middle_name\n</pre> students_name = first_name  middle_name <pre>\n  File \"C:\\Users\\USER\\AppData\\Local\\Temp/ipykernel_3272/3084417407.py\", line 1\n    students_name = first_name  middle_name\n                                ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[33]: Copied! <pre>new_student = first_name + ' ' +  'Bill'\nnew_student\n</pre> new_student = first_name + ' ' +  'Bill' new_student Out[33]: <pre>'Kelly Bill'</pre> <ul> <li>In Python, the <code>*</code>operator can be used to create multiple copies of a string. Here are some examples:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li><p>The bracket <code>[]</code> operator allows us to access individual characters in a string.</p> <p>It takes an index as an argument and returns the character at that position in the string.</p> <p>For example,lets get the first letter of the string <code>name</code>.</p> </li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>Python strings are indexed from left to right, with the first character at index 0, the second at index 1, and so on.</li> </ul> <ul> <li>You can access a specific character in a string using indexing, such as <code>my_string[0]</code> to get the first character.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example   <ul> <li>We can also use negative indices to access characters from the end of the string.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example    <ul> <li><code>string[:i] + string [i:]</code> will be equal to string</li> </ul> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <ul> <li>Negative indices begin with -1, and <code>-0</code> is equivalent to <code>0</code>.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example  In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>To use both single and double quotes in a string, you must use escape characters.</li> <li>An escape character enables you to use characters that would otherwise be impossible to include in a string.</li> <li>An escape character is a backslash \\ followed by the desired character to be included in the string. This allows for special characters, such as quotation marks, to be used without disrupting the string.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>''' \\' To add a Single quote\ncar = 'This is Mr. Ken\\'s car'\n\n\\\" To add Double quote\nher_husband = \"He is a \\\"good\\\" man\"\n\n\\t To add Tab\nwelcome_message = 'How did you know\\tAbout the data Armory\\tMake sure you share and subscribe'\n\n\\n To add a Newline (line break)\nwelcome_message = 'How did you know\\nAbout the data Armory\\nMake sure you share and subscribe'\n\n\\\\ To use Backslash\nback_slash = ' An escape character is a backslash \\\\' '''\n</pre> ''' \\' To add a Single quote car = 'This is Mr. Ken\\'s car'  \\\" To add Double quote her_husband = \"He is a \\\"good\\\" man\"  \\t To add Tab welcome_message = 'How did you know\\tAbout the data Armory\\tMake sure you share and subscribe'  \\n To add a Newline (line break) welcome_message = 'How did you know\\nAbout the data Armory\\nMake sure you share and subscribe'  \\\\ To use Backslash back_slash = ' An escape character is a backslash \\\\' ''' In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>Without the use of print(), a new line character (\\n) will be included in the output.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example    <ul> <li>A backslash can be placed at the end of a line to ignore the newline character.</li> <li>A backslash \\ indicates that the current line should be continued on the next line.</li> <li>It is used to break up a long line of code into smaller sections for readability.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code example\n</pre> #Code example   <ul> <li>A raw string ignores all escape characters and prints any backslash it contains. No special treatment is given to the backslash.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>There is an important consideration when using raw strings, which is that it cannot end with an uneven number of \\ characters.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example    <ul> <li>How to end a raw string with an odd number of backslashes.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Use regular strings and double the backslashes:\n</pre> #Use regular strings and double the backslashes:  In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>#len function</p> <ul> <li>The len() function can be used to determine the number of characters in a string. In this case, using the len() function on the string <code>name</code> would return the value <code>12</code>.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>#Stripping Whitespace</p> <ul> <li>The <code>rstrip()</code> method can be used to remove any extra whitespace from the right end of a string. For example:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example  <ul> <li>String literals can span multiple lines and are delimited by either three single quotes or three double quotes. For example, to create a multiline string in Python we can write:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>#String slices</p> <ul> <li><p>Python allows for string slicing, which means accessing a specific portion of a string.</p> </li> <li><p>Like lists, strings in Python can be accessed using indexes and slices. The syntax for slicing a string is the same as slicing a list, with the start and end indices separated by a colon. For example, <code>string[0]</code> would return the first character of the string, while <code>string[0:3]</code> would return the first three characters. The syntax is as follows:</p> </li> <li><p>Because Python (like many programming languages) uses zero-based indexing</p> </li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>In Python you can capture a slice from one string variable and store it in a separate string variable using slicing notation.</li> <li>For example, to capture the first three characters of the string variable <code>name</code> and store it in a separate variable <code>first_three</code>, you can use the following code:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>Points to Note:</p> <ul> <li>Negative indexing and slicing: You can also index and slice strings from right to left using negative indices. For example, <code>my_string[-1]</code> would give you the last character, and <code>my_string[-4:-1]</code> would give you a substring starting from the fourth character from the end and ending at the second-to-last.</li> <li>Slice step: You can also specify a step size in the slice, which allows you to skip characters in the string. For example, <code>my_string[0:6:2]</code> would give you every other character from the first to the fifth character.</li> <li>Immutable strings: It's important to remember that strings in Python are immutable, which means you cannot modify them directly. However, you can create new strings by concatenating or slicing existing strings.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>Using negative numbers can be useful when working with strings of unknown length or when you want to access characters starting from the end of the string.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>You can reverse a string using slicing by specifying a step of -1. For example:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>You can also use indexing to combine strings.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>#The in and not in Operators</p> <ul> <li>The <code>in</code> and <code>not in</code> operators in Python can be used to check if a substring is present or absent, respectively, in a given string.</li> <li>The operator returns a boolean value (<code>True</code> or <code>False</code>) based on whether the substring is found in the string or not.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Simple Looping and counting program;\n</pre> #Simple Looping and counting program; In\u00a0[1]: Copied! <pre># using the in operator\n</pre> # using the in operator   In\u00a0[\u00a0]: Copied! <pre># using the not in operator\n</pre> # using the not in operator <ul> <li>These operators can be useful for various string operations, such as searching for a specific substring or checking if a password meets certain requirements.</li> <li>These membership operators can be used with a wide range of Python objects that support membership testing, such as lists, tuples, sets, dictionaries, and strings.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Password\n</pre> #Password  <p>#String Comparison</p> <ul> <li>To check if two strings are equal, you can use the <code>==</code> operator. For example:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>To check if two strings are not equal, you can use the <code>!=</code> operator. For example, <code>if my_string1 != my_string2:</code> will evaluate to <code>True</code> if <code>my_string1</code> is not equal to <code>my_string2</code>.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>String comparison: You can also compare two strings to determine which one is greater or lesser than the other, based on their ASCII values. For example, <code>if my_string1 &lt; my_string2:</code> will evaluate to <code>True</code> if <code>my_string1</code> comes before <code>my_string2</code> in alphabetical order.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li><p>Case sensitivity: By default, string comparison in Python is case-sensitive, which means that \"apple\" and \"Apple\" are considered different strings.</p> </li> <li><p>If you want to perform a case-insensitive comparison, you can convert the strings to lowercase or uppercase using the <code>lower()</code> or <code>upper()</code> method before comparing them.</p> </li> <li><p>By mastering these techniques for comparing strings in Python, you can effectively perform conditional checks and string operations in your code.</p> </li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>For more information on these and other string methods in Python, see the official Python documentation.</li> </ul> <p>#Strings are immutable</p> <ul> <li>In Python, strings are immutable. This means that once a string is created, it cannot be modified.</li> <li>Any operation that appears to modify a string actually creates a new string. Here are some examples:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>Some string methods that have names beginning with the word \"is\" include:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>#Strings are immutable</p> <ul> <li>In Python, strings are immutable. This means that once a string is created, it cannot be modified. Any operation that appears to modify a string actually creates a new string. Here are some examples:</li> </ul> <p>#The <code>dir()</code> on strings</p> <ul> <li>The <code>dir()</code> function in Python returns a list of all the available attributes and methods of an object. Here are some code examples using <code>dir()</code> on strings:</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <ul> <li>The output of dir() on a string object will also include a number of string attributes, such as class, doc, and len(). These attributes can be used to obtain information about the string object, such as its class, documentation, or length.</li> </ul> <ul> <li>You can use the built-in help() function. Simply pass the attribute or method as an argument to help(), and it will display the documentation and usage information for that attribute or method.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example <p>The % operator(Old Way)</p> <ul> <li>The % operator in Python is used to format strings by replacing placeholders with the values of variables.</li> </ul> In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example  In\u00a0[\u00a0]: Copied! <pre>#Code Example\n</pre> #Code Example"},{"location":"04_python_strings/#python-strings-learning-outcome","title":"Python Strings Learning Outcome\u00b6","text":""},{"location":"04_python_strings/#advantages-of-python-strings","title":"Advantages of Python Strings\u00b6","text":""},{"location":"04_python_strings/#disadvantages-of-python-strings","title":"Disadvantages of Python Strings\u00b6","text":""},{"location":"04_python_strings/#application-of-python-strings","title":"Application of Python Strings\u00b6","text":""},{"location":"04_python_strings/#what-is-a-string","title":"What is a String?\u00b6","text":""},{"location":"04_python_strings/#string-operators","title":"#String  Operators\u00b6","text":""},{"location":"04_python_strings/#the-operator","title":"The <code>+</code> operator\u00b6","text":""},{"location":"04_python_strings/#the-operator","title":"The <code>*</code>operator\u00b6","text":""},{"location":"04_python_strings/#string-indexing","title":"String indexing\u00b6","text":""},{"location":"04_python_strings/#escape-characters","title":"Escape Characters\u00b6","text":""},{"location":"04_python_strings/#raw-strings","title":"Raw Strings\u00b6","text":""},{"location":"04_python_strings/#multiline-string","title":"Multiline String\u00b6","text":""},{"location":"04_python_strings/#string-methods","title":"String Methods\u00b6","text":"<ul> <li><p>Several string methods can be used to analyze strings or create transformed string values. This section describes the methods that you will use most frequently.</p> </li> <li><p>Here are some examples of Python string methods:</p> </li> </ul>"},{"location":"04_python_strings/#string-formatting","title":"String Formatting\u00b6","text":""},{"location":"04_python_strings/#references-and-further-reading","title":"References and Further Reading.\u00b6","text":"<p>Digital Ocean: How To Perform Sentiment Analysis in Python 3 Using the Natural Language Toolkit (NLTK)</p> <p>Real Python: Python String Formatting Best Practices</p> <p>The official Python documentation</p> <p>Python Strings</p>"},{"location":"projects/","title":"EDA/ML Projects","text":""},{"location":"projects/#nyc-shooting-incidences-eda","title":"NYC Shooting Incidences EDA","text":"<p>The Exploratory Data Analysis (EDA) focuses on extracting insights from data on shooting incidents in New York City. Specifically, it narrows down on various aspects such as the location, date, and time of the incident, as well as details about the shooter/victim such as their age, gender, and race.</p> <p>Learn More --&gt;</p> <p>Tools Used : Python | Numpy | Pandas | Matplotlib | Seaborn | Plotly |</p>"},{"location":"projects/#olympics-data-eda","title":"Olympics Data EDA","text":"<p>This analysis focuses on the participation and performance trends across various nations, sports, and events during the period spanning from the 1986 to 2016 Olympic Games. The EDA explores significant questions related to these areas.The analysis raises questions about the participation and performance of different nations, sports, and events, providing valuable information and perspectives for those involved in the world of sports.</p> <p>Learn More --&gt;</p> <p>Tools Used : Python | Numpy | Pandas | Matplotlib | Seaborn | Plotly |</p>"},{"location":"python_index/","title":"Home","text":"Course Outline"},{"location":"python_index/#what-is-python","title":"What is Python?","text":"<ul> <li>In this chapter, we will learn what is Python, why Python is used, the downside of Python, and why Python is good for Data Science.</li> </ul>"},{"location":"python_index/#python-variables","title":"Python Variables.","text":"<ul> <li>In this chapter, we will learn about Variables in Python, including their definition, rules and guidelines for naming, Python keywords and built-in functions. By the end of the chapter, you will be able to define and use Variables, understand the importance of rules and guidelines for naming variables, and adhere to these rules and guidelines in your own programming.</li> </ul>"},{"location":"python_index/#data-types","title":"Data Types","text":"<ul> <li>In this chapter, we will define what a data type is and examine the common, simple data types in Python, as well as the categories of these data types. By the end, you will be familiar with the simple data types and their respective categories, and have an idea of the types of operations that can be done on values.</li> </ul>"},{"location":"python_index/#python-comments","title":"Python Comments","text":"<ul> <li>This chapter will teach us about comments, including what they are, how to create them, and the different types, with the intended outcome of gaining knowledge on their importance and how to make them.<pre><code>                      **Other sections coming up**\n</code></pre> </li> </ul>"},{"location":"statistics_index/","title":"Essential Statistical Concepts For Data Analysts.","text":"<p>The objective of this course is to streamline the understanding of fundamental statistical concepts for aspiring Data Analysts who are new to the field.</p> Number Notebook Video Tutorial 00 Essential Statistical Concepts 00-Tutorial 01 Structured and Unstructured Data 01-Tutorial"}]}